{"version":3,"sources":["logo.svg","components/icon.js","App.js","reportWebVitals.js","index.js"],"names":["Icon","name","className","itemArray","Array","fill","App","useState","isCross","setIsCross","winMessage","setWinMessage","changeItem","itemNumber","toast","type","Container","position","Row","Col","md","Button","color","block","onClick","map","item","index","Card","CardBody","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNAAe,I,aCiBAA,EAdF,SAAC,GACV,OADuB,EAAXC,MAER,IAAK,SACD,OAAO,cAAC,IAAD,CAAaC,UAAU,SAElC,IAAK,QACD,OAAO,cAAC,IAAD,CAASA,UAAU,SAE9B,QACI,OAAO,cAAC,IAAD,CAAOA,UAAU,W,+DCC9BC,G,YAAYC,MAAM,GAAGC,KAAK,UAiGjBC,EA/FH,WAEV,MAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAsCMC,EAAa,SAACC,GAClB,OAAIH,EACKI,YAAMJ,EAAY,CAAEK,KAAM,YAGN,SAAzBZ,EAAUU,GAKLC,YAAM,kBAAmB,CAAEC,KAAM,WAJxCZ,EAAUU,GAAcL,EAAU,QAAU,SAC5CC,GAAYD,QAnCK,SAAhBL,EAAU,IAAiBA,EAAU,IAAMA,EAAU,IAAMA,EAAU,IAAMA,EAAU,GACtFQ,EAAc,GAAD,OAAIR,EAAU,GAAd,UAES,SAAhBA,EAAU,IAAiBA,EAAU,IAAMA,EAAU,IAAMA,EAAU,IAAMA,EAAU,GAC3FQ,EAAc,GAAD,OAAIR,EAAU,GAAd,UAES,SAAhBA,EAAU,IAAiBA,EAAU,IAAMA,EAAU,IAAMA,EAAU,IAAMA,EAAU,IAIrE,SAAhBA,EAAU,IAAiBA,EAAU,IAAMA,EAAU,IAAMA,EAAU,IAAMA,EAAU,GAH3FQ,EAAc,GAAD,OAAIR,EAAU,GAAd,UAMS,SAAhBA,EAAU,IAAiBA,EAAU,IAAMA,EAAU,IAAMA,EAAU,IAAMA,EAAU,GAC3FQ,EAAc,GAAD,OAAIR,EAAU,GAAd,UAES,SAAhBA,EAAU,IAAiBA,EAAU,IAAMA,EAAU,IAAMA,EAAU,IAAMA,EAAU,GAC3FQ,EAAc,GAAD,OAAIR,EAAU,GAAd,WAGS,SAAhBA,EAAU,IAAiBA,EAAU,IAAMA,EAAU,IAAMA,EAAU,IAAMA,EAAU,IAGrE,SAAhBA,EAAU,IAAiBA,EAAU,IAAMA,EAAU,IAAMA,EAAU,IAAMA,EAAU,KAF3FQ,EAAc,GAAD,OAAIR,EAAU,GAAd,aAuBjB,OACE,eAACa,EAAA,EAAD,CAAWd,UAAU,MAArB,UACE,cAAC,IAAD,CAAgBe,SAAS,kBACzB,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAKC,GAAI,EAAGlB,UAAU,cAAtB,UAEIQ,EACE,sBAAKR,UAAU,YAAf,UACE,oBAAIA,UAAU,0CAAd,SACGQ,IAEH,cAACW,EAAA,EAAD,CACEC,MAAM,UACNC,OAAK,EACLC,QAlEG,WACjBf,GAAW,GACXE,EAAc,IACdR,EAAUE,KAAK,UAgEDH,UAAU,YAJZ,4BAQA,qBAAIA,UAAU,2BAAd,qBACSM,EAAU,QAAU,YAGnC,qBAAKN,UAAU,OAAf,SACGC,EAAUsB,KAAI,SAACC,EAAMC,GAAP,OACb,cAACC,EAAA,EAAD,CAAMN,MAAM,UAAUE,QAAS,WAAOZ,EAAWe,IAAjD,SACE,cAACE,EAAA,EAAD,CAAU3B,UAAU,MAApB,SACE,cAAC,EAAD,CAAMD,KAAMyB,sBCvFfI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.75d87acd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\r\nimport { FaTimes, FaPen, FaRegCircle } from 'react-icons/fa';\r\n\r\nconst Icon = ({ name }) => {\r\n    switch (name) {\r\n        case 'circle':\r\n            return <FaRegCircle className=\"icon\" />\r\n\r\n        case 'cross':\r\n            return <FaTimes className=\"icon\" />\r\n\r\n        default:\r\n            return <FaPen className=\"icon\" />\r\n\r\n    }\r\n};\r\n\r\nexport default Icon;\r\n","import React, { useState } from 'react';\nimport logo from './logo.svg';\n\nimport Icon from './components/icon';\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { Card, CardBody, Container, Button, Col, Row } from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport './App.css';\n\nconst itemArray = Array(9).fill(\"empty\");\n\nconst App = () => {\n\n  const [isCross, setIsCross] = useState(false);\n  const [winMessage, setWinMessage] = useState(\"\");\n\n  const reloadGame = () => {\n    setIsCross(false);\n    setWinMessage(\"\");\n    itemArray.fill(\"empty\");\n  }\n\n  const checkIsWinner = () => {\n    // for rows\n    if(itemArray[0] != \"empty\" && itemArray[0] == itemArray[1] && itemArray[1] == itemArray[2]){\n      setWinMessage(`${itemArray[0]} wins`);\n    }\n    else if(itemArray[3] != \"empty\" && itemArray[3] == itemArray[4] && itemArray[4] == itemArray[5]){\n      setWinMessage(`${itemArray[3]} wins`);\n    }\n    else if(itemArray[6] != \"empty\" && itemArray[6] == itemArray[7] && itemArray[7] == itemArray[8]){\n      setWinMessage(`${itemArray[0]} wins`);\n    }\n    //for columns\n    else if(itemArray[0] != \"empty\" && itemArray[0] == itemArray[3] && itemArray[3] == itemArray[6]){\n      setWinMessage(`${itemArray[0]} wins`);\n    }\n    else if(itemArray[1] != \"empty\" && itemArray[1] == itemArray[4] && itemArray[4] == itemArray[7]){\n      setWinMessage(`${itemArray[1]} wins`);\n    }\n    else if(itemArray[2] != \"empty\" && itemArray[2] == itemArray[5] && itemArray[5] == itemArray[8]){\n      setWinMessage(`${itemArray[2]} wins`);\n    }\n    // for diagonals\n    else if(itemArray[0] != \"empty\" && itemArray[0] == itemArray[4] && itemArray[4] == itemArray[8]){\n      setWinMessage(`${itemArray[0]} wins`);\n    }\n    else if(itemArray[2] != \"empty\" && itemArray[2] == itemArray[4] && itemArray[4] == itemArray[6]){\n      setWinMessage(`${itemArray[0]} wins`);\n    }\n  } // end of checkWinner()\n\n  const changeItem = (itemNumber) => {\n    if (winMessage) {\n      return toast(winMessage, { type: \"success\" });\n    }\n\n    if (itemArray[itemNumber] == \"empty\") {\n      itemArray[itemNumber] = isCross ? \"cross\" : \"circle\";\n      setIsCross(!isCross);\n    }\n    else {\n      return toast(\"already filled!\", { type: \"error\" });\n    }\n\n    checkIsWinner();\n  }\n\n  return (\n    <Container className=\"p-5\">\n      <ToastContainer position=\"bottom-center\" />\n      <Row>\n        <Col md={6} className=\"offset-md-3\">\n          {\n            winMessage ? (\n              <div className=\"mb-2 mt-2\">\n                <h1 className=\"text-success test-uppercase text-center\">\n                  {winMessage}\n                </h1>\n                <Button\n                  color=\"success\"\n                  block\n                  onClick={reloadGame}\n                  className=\"btn-block\"\n                >Reload Game</Button>\n              </div>\n            )\n              : <h1 className=\"text-center text-warning\">\n                turn of {isCross ? \"cross\" : \"circle\"}\n              </h1>\n          }\n          <div className=\"grid\">\n            {itemArray.map((item, index) => (\n              <Card color=\"warning\" onClick={() => {changeItem(index)}}>\n                <CardBody className=\"box\">\n                  <Icon name={item} />\n                </CardBody>\n              </Card>\n            ))}\n          </div>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}